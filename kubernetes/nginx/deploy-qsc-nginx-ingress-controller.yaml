# Source: ingress-nginx/templates/controller-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: ingress-nginx-controller
    app.kubernetes.io/name: ingress-nginx-controller
    app.kubernetes.io/instance: ingress-nginx-controller
    app.kubernetes.io/version: 0.34.1
    app.kubernetes.io/component: controller
  name: ingress-nginx-controller
  namespace: @@my_namespace@@
---
apiVersion: networking.k8s.io/v1beta1
kind: IngressClass
metadata:
  name: ingress-nginx-controller
spec:
# controller: @@my_namespace@@/ingress-nginx-controller
  controller: k8s.io/ingress-nginx
  parameters:
    apiGroup: k8s.example.com
    kind: IngressParameters
    name: ingress-nginx-controller
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    run: ingress-nginx-default-backend
  name: ingress-nginx-default-backend
  namespace: @@my_namespace@@
spec:
  replicas: 1
  selector:
    matchLabels:
      run: ingress-nginx-default-backend
  template:
    metadata:
      labels:
        run: ingress-nginx-default-backend
    spec:
      containers:
      - name: ingress-nginx-default-backend
        image: gcr.io/google_containers/defaultbackend:1.0
        ports:
        - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  labels:
    run: ingress-nginx-default-backend
  name: ingress-nginx-default-backend
  namespace: @@my_namespace@@
spec:
  selector:
    run: ingress-nginx-default-backend
  ports:
  - name: http
    port: 8081
    protocol: TCP
    targetPort: 8080
---
# Source: ingress-nginx/templates/controller-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: ingress-nginx-controller
    app.kubernetes.io/name: ingress-nginx-controller
    app.kubernetes.io/instance: ingress-nginx-controller
    app.kubernetes.io/version: 0.34.1
    app.kubernetes.io/component: controller
  name: ingress-nginx-controller
  namespace: @@my_namespace@@
data:

---
# Source: ingress-nginx/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app: ingress-nginx-controller
    app.kubernetes.io/name: ingress-nginx-controller
    app.kubernetes.io/instance: ingress-nginx-controller
    app.kubernetes.io/version: 0.34.1
  name: ingress-nginx-controller
  namespace: @@my_namespace@@
rules:
  - apiGroups:
      - ''
    resources:
      - configmaps
      - endpoints
      - nodes
      - pods
      - secrets
    verbs:
      - list
      - watch
  - apiGroups:
      - ''
    resources:
      - nodes
    verbs:
      - get
  - apiGroups:
      - ''
    resources:
      - services
    verbs:
      - get
      - list
      - update
      - watch
  - apiGroups:
      - extensions
      - networking.k8s.io   # k8s 1.14+
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ''
    resources:
      - events
    verbs:
      - create
      - patch
  - apiGroups:
      - extensions
      - networking.k8s.io   # k8s 1.14+
    resources:
      - ingresses/status
    verbs:
      - update
  - apiGroups:
      - networking.k8s.io   # k8s 1.14+
    resources:
      - ingressclasses
    verbs:
      - get
      - list
      - watch
---
# Source: ingress-nginx/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app: ingress-nginx-controller
    app.kubernetes.io/name: ingress-nginx-controller
    app.kubernetes.io/instance: ingress-nginx-controller
    app.kubernetes.io/version: 0.34.1
  name: ingress-nginx-controller
  namespace: @@my_namespace@@
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: ingress-nginx-controller
subjects:
  - kind: ServiceAccount
    name: ingress-nginx-controller
    namespace: @@my_namespace@@
---
# Source: ingress-nginx/templates/controller-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app: ingress-nginx-controller
    app.kubernetes.io/name: ingress-nginx-controller
    app.kubernetes.io/instance: ingress-nginx-controller
    app.kubernetes.io/version: 0.34.1
    app.kubernetes.io/component: controller
  name: ingress-nginx-controller
  namespace: @@my_namespace@@
rules:
  - apiGroups:
      - ''
    resources:
      - namespaces
    verbs:
      - get
  - apiGroups:
      - ''
    resources:
      - configmaps
      - pods
      - secrets
      - endpoints
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ''
    resources:
      - services
    verbs:
      - get
      - list
      - update
      - watch
  - apiGroups:
      - extensions
      - networking.k8s.io   # k8s 1.14+
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - extensions
      - networking.k8s.io   # k8s 1.14+
    resources:
      - ingresses/status
    verbs:
      - update
  - apiGroups:
      - networking.k8s.io   # k8s 1.14+
    resources:
      - ingressclasses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ''
    resources:
      - configmaps
    resourceNames:
      - ingress-controller-leader-nginx
    verbs:
      - get
      - update
  - apiGroups:
      - ''
    resources:
      - configmaps
    verbs:
      - create
      - get
      - update
  - apiGroups:
      - ''
    resources:
      - endpoints
    verbs:
      - create
      - get
      - update
  - apiGroups:
      - ''
    resources:
      - events
    verbs:
      - create
      - patch
---
# Source: ingress-nginx/templates/controller-rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app: ingress-nginx-controller
    app.kubernetes.io/name: ingress-nginx-controller
    app.kubernetes.io/instance: ingress-nginx-controller
    app.kubernetes.io/version: 0.34.1
    app.kubernetes.io/component: controller
  name: ingress-nginx-controller
  namespace: @@my_namespace@@
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: ingress-nginx-controller
subjects:
  - kind: ServiceAccount
    name: ingress-nginx-controller
    namespace: @@my_namespace@@
---
# Source: ingress-nginx/templates/controller-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: ingress-nginx-controller
    app.kubernetes.io/name: ingress-nginx-controller
    app.kubernetes.io/instance: ingress-nginx-controller
    app.kubernetes.io/version: 0.34.1
    app.kubernetes.io/component: controller
  name: ingress-nginx-controller
  namespace: @@my_namespace@@
  annotations: 
#   See here for a list of available annotations: 
#   https://github.com/kubernetes/ingress-nginx/blob/master/docs/user-guide/nginx-configuration/annotations.md
#    nginx.ingress.kubernetes.io/default-backend: @@my_namespace@@/nignx-ingress-default-backend
#    nginx.ingress.kubernetes.io/proxy-ssl-secret: @@my_namespace@@/@@External_LB_CertSecretName@@
#   LB alg can be round_robin or ewma
#    nginx.ingress.kubernetes.io/load-balance: ewma
#    nginx.ingress.kubernetes.io/ssl-ciphers: >-
#      "TLS_AES_256_GCM_SHA384:TLS_AES_128_GCM_SHA256:TLS_CHACHA20_POLY1305_SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305"
spec:
  replicas: 2
  selector:
    matchLabels:
      app: ingress-nginx-controller
      app.kubernetes.io/name: ingress-nginx-controller
      app.kubernetes.io/instance: ingress-nginx-controller
      app.kubernetes.io/component: controller
  revisionHistoryLimit: 10
  minReadySeconds: 0
  template:
    metadata:
      labels:
        app: ingress-nginx-controller
        app.kubernetes.io/name: ingress-nginx-controller
        app.kubernetes.io/instance: ingress-nginx-controller
        app.kubernetes.io/component: controller
    spec:
      dnsPolicy: ClusterFirst
      imagePullSecrets:
        - name: qsc-ingress-image-pull-secret
      containers:
        - name: controller
          image: de.icr.io/qsc-ingress-test-registry/ingress_qsc:v0.34.1
#          image: us.gcr.io/k8s-artifacts-prod/ingress-nginx/controller:v0.34.1@sha256:0e072dddd1f7f8fc8909a2ca6f65e76c5f0d2fcfb8be47935ae3457e8bbceb20
          imagePullPolicy: Always
          lifecycle:
            preStop:
              exec:
                command:
                  - /wait-shutdown
          args:
#           See here for list of arguments: https://kubernetes.github.io/ingress-nginx/user-guide/cli-arguments/
            - /nginx-ingress-controller
            - --publish-service=@@my_namespace@@/ingress-nginx-controller
            - --default-backend-service=@@my_namespace@@/ingress-nginx-default-backend
            - --default-server-port=8081
            - --default-ssl-certificate=@@my_namespace@@/@@External_LB_CertSecretName@@
#            - --watch-namespace=@@my_namespace@@
#            - --election-id=ingress-nignx-controller-leader
#            - --ingress-class="nginx"
#            - --ingress-class="my.nginx"
#            - --ingress-class=ingress-nginx-class
            - --configmap=@@my_namespace@@/ingress-nginx-controller
#            - --validating-webhook=:8443
#            - --validating-webhook-certificate=/usr/local/certificates/cert
#            - --validating-webhook-key=/usr/local/certificates/key
#           - /nginx-ingress-controller
#            - --publish-service=ingress-nginx/ingress-nginx-controller
#            - --election-id=ingress-controller-leader
#            - --ingress-class=nginx
#            - --configmap=ingress-nginx/ingress-nginx-controller
#            - --validating-webhook=:8443
#            - --validating-webhook-certificate=/usr/local/certificates/cert
#            - --validating-webhook-key=/usr/local/certificates/key
          securityContext:
            capabilities:
              drop:
                - ALL
              add:
                - NET_BIND_SERVICE
            runAsUser: 101
            allowPrivilegeEscalation: true
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          livenessProbe:
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 5
          readinessProbe:
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 3
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
            - name: https
              containerPort: 443
              protocol: TCP
          resources:
            requests:
              cpu: 100m
              memory: 90Mi
      serviceAccountName: ingress-nginx-controller
      terminationGracePeriodSeconds: 300

