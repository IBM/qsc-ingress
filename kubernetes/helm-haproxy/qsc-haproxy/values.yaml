# Default values for qsc-nginx.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

imageCredentials: # image credentials info that will be used to create an image pull secret
  registry: de.icr.io/qsc-ingress-test-registry # registry for the image. image credentials info that will be used to create an image pull secret
  username: iamapikey # username for accessing the registry
  password: PasswordGoesHere # password
  email: temp@.ibm.com # email

# uncomment the imagePullSecret to create a secret with imageCredentials specified above
# imagePullSecret: 
#   name: qsc-ingress-image-pull-secret # name of the image pull secret that will be created

client:
  image:
    repository: docker.io/qscingresspoc/qsc_curl # info required for testing the QSC setup using a QSC enabled curl client. repository info for the QSC enabled curl client
    tag: latest # tag to use
    pullPolicy: Always # pull policy

backend: # info related to the sample backend that the ingress controller will route to
  replicaCount: 3 # no. of replicas for the backend deployment

  image:
    repository:  docker.io/qscingresspoc/custom_backend # repository info for the sample backend
    tag: latest # tag to use
    pullPolicy: Always # pull policy

# uncomment the imagePullSecret to use this image secret
  # imagePullSecrets:  
  # - name: qsc-ingress-image-pull-secret # name of the image pull secret
  
  nameOverride: "" # used to set the label 'app.kubernetes.io/name' for the backend. If left empty, the default chart name will be used
  fullnameOverride: "custom-backend" # used to set the name of the backend deployment and service.

  serviceAccount:
    create: true # specifies whether a service account should be created
    name: "" # the name of the service account to use. If not set and create is true, a name is generated using the fullname template

  podSecurityContext: {} # Pod security context
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  service:
    type: ClusterIP # service type
    port: 80 # port where the service is exposed

  nodeSelector: {} # node selector information

  tolerations: []

  affinity: {}

  resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

ingress: # informaton related to configuring the ingress
  enabled: true # if set to true, the ingress resource will be deployed
  class: ingress-haproxy-class # ingress class name used to target an ingress class and also deploy an ingress class resource with this name
  annotations: # annotations for the ingress resource
    # See here for all options: https://github.com/haproxytech/kubernetes-ingress/tree/master/documentation
    ingress.class: "ingress-haproxy-class"
    haproxy.org/ssl-redirect: "true" # set to true to disable HTTP access. Only HTTPS access will be allowed if this is set to true

  hosts: # The hosts information to specify the host and the paths. This will be overridden if the 'deploy.sh' script is used for deployment and will point to the configured subdomain
    - host: qsc-ingress-cluster-d465a2b8669424cc1f37658bec09acda-0001.eu-de.containers.appdomain.cloud
      paths: 
        - /

  tls: # TLS related information. This will be overridden if the 'deploy.sh' script is used for deployment and will point to the configured subdomain and the secret name configured in the namespace
    - secretName: qsc-ingress-cluster-d465a2b8669424cc1f37658bec09acda-0001
      hosts:
        - qsc-ingress-cluster-d465a2b8669424cc1f37658bec09acda-0001.eu-de.containers.appdomain.cloud


ingressController:
  name: helm-haproxy-ingress-controller # This name should match the service name in the load-balancer chart. If 'deploy.sh' script is used, it will automatically ensure that this matches and overrides to match if necessary
  
 # uncomment the imagePullSecret to use this image secret
  #imagePullSecrets:  
  #- name: qsc-ingress-image-pull-secret # name of the image pull secret

  image:
    repository:  docker.io/qscingresspoc/qsc_haproxy_ingress_controller # repository info for the ingress controller
    tag: v1.4.7 # tag to use
    pullPolicy: Always # pull policy

